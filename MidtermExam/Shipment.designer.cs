#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MidtermExam
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Shipment")]
	public partial class ShipmentDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPort(Port instance);
    partial void UpdatePort(Port instance);
    partial void DeletePort(Port instance);
    partial void InsertTrip(Trip instance);
    partial void UpdateTrip(Trip instance);
    partial void DeleteTrip(Trip instance);
    partial void InsertShip(Ship instance);
    partial void UpdateShip(Ship instance);
    partial void DeleteShip(Ship instance);
    #endregion
		
		public ShipmentDataContext() : 
				base(global::MidtermExam.Properties.Settings.Default.ShipmentConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ShipmentDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShipmentDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShipmentDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShipmentDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Port> Ports
		{
			get
			{
				return this.GetTable<Port>();
			}
		}
		
		public System.Data.Linq.Table<Trip> Trips
		{
			get
			{
				return this.GetTable<Trip>();
			}
		}
		
		public System.Data.Linq.Table<Ship> Ships
		{
			get
			{
				return this.GetTable<Ship>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Port")]
	public partial class Port : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PortCode;
		
		private string _PortName;
		
		private EntitySet<Trip> _Trips;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPortCodeChanging(string value);
    partial void OnPortCodeChanged();
    partial void OnPortNameChanging(string value);
    partial void OnPortNameChanged();
    #endregion
		
		public Port()
		{
			this._Trips = new EntitySet<Trip>(new Action<Trip>(this.attach_Trips), new Action<Trip>(this.detach_Trips));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortCode", DbType="NChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PortCode
		{
			get
			{
				return this._PortCode;
			}
			set
			{
				if ((this._PortCode != value))
				{
					this.OnPortCodeChanging(value);
					this.SendPropertyChanging();
					this._PortCode = value;
					this.SendPropertyChanged("PortCode");
					this.OnPortCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortName", DbType="NVarChar(50)")]
		public string PortName
		{
			get
			{
				return this._PortName;
			}
			set
			{
				if ((this._PortName != value))
				{
					this.OnPortNameChanging(value);
					this.SendPropertyChanging();
					this._PortName = value;
					this.SendPropertyChanged("PortName");
					this.OnPortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Port_Trip", Storage="_Trips", ThisKey="PortCode", OtherKey="PortCode")]
		public EntitySet<Trip> Trips
		{
			get
			{
				return this._Trips;
			}
			set
			{
				this._Trips.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Port = this;
		}
		
		private void detach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Port = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trip")]
	public partial class Trip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TripID;
		
		private string _ShipCode;
		
		private string _PortCode;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntityRef<Port> _Port;
		
		private EntityRef<Ship> _Ship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTripIDChanging(int value);
    partial void OnTripIDChanged();
    partial void OnShipCodeChanging(string value);
    partial void OnShipCodeChanged();
    partial void OnPortCodeChanging(string value);
    partial void OnPortCodeChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public Trip()
		{
			this._Port = default(EntityRef<Port>);
			this._Ship = default(EntityRef<Ship>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TripID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TripID
		{
			get
			{
				return this._TripID;
			}
			set
			{
				if ((this._TripID != value))
				{
					this.OnTripIDChanging(value);
					this.SendPropertyChanging();
					this._TripID = value;
					this.SendPropertyChanged("TripID");
					this.OnTripIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShipCode", DbType="NChar(3)")]
		public string ShipCode
		{
			get
			{
				return this._ShipCode;
			}
			set
			{
				if ((this._ShipCode != value))
				{
					if (this._Ship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShipCodeChanging(value);
					this.SendPropertyChanging();
					this._ShipCode = value;
					this.SendPropertyChanged("ShipCode");
					this.OnShipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortCode", DbType="NChar(3)")]
		public string PortCode
		{
			get
			{
				return this._PortCode;
			}
			set
			{
				if ((this._PortCode != value))
				{
					if (this._Port.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPortCodeChanging(value);
					this.SendPropertyChanging();
					this._PortCode = value;
					this.SendPropertyChanged("PortCode");
					this.OnPortCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Port_Trip", Storage="_Port", ThisKey="PortCode", OtherKey="PortCode", IsForeignKey=true)]
		public Port Port
		{
			get
			{
				return this._Port.Entity;
			}
			set
			{
				Port previousValue = this._Port.Entity;
				if (((previousValue != value) 
							|| (this._Port.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Port.Entity = null;
						previousValue.Trips.Remove(this);
					}
					this._Port.Entity = value;
					if ((value != null))
					{
						value.Trips.Add(this);
						this._PortCode = value.PortCode;
					}
					else
					{
						this._PortCode = default(string);
					}
					this.SendPropertyChanged("Port");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ship_Trip", Storage="_Ship", ThisKey="ShipCode", OtherKey="ShipCode", IsForeignKey=true)]
		public Ship Ship
		{
			get
			{
				return this._Ship.Entity;
			}
			set
			{
				Ship previousValue = this._Ship.Entity;
				if (((previousValue != value) 
							|| (this._Ship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ship.Entity = null;
						previousValue.Trips.Remove(this);
					}
					this._Ship.Entity = value;
					if ((value != null))
					{
						value.Trips.Add(this);
						this._ShipCode = value.ShipCode;
					}
					else
					{
						this._ShipCode = default(string);
					}
					this.SendPropertyChanged("Ship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ship")]
	public partial class Ship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ShipCode;
		
		private string _ShipName;
		
		private EntitySet<Trip> _Trips;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShipCodeChanging(string value);
    partial void OnShipCodeChanged();
    partial void OnShipNameChanging(string value);
    partial void OnShipNameChanged();
    #endregion
		
		public Ship()
		{
			this._Trips = new EntitySet<Trip>(new Action<Trip>(this.attach_Trips), new Action<Trip>(this.detach_Trips));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShipCode", DbType="NChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ShipCode
		{
			get
			{
				return this._ShipCode;
			}
			set
			{
				if ((this._ShipCode != value))
				{
					this.OnShipCodeChanging(value);
					this.SendPropertyChanging();
					this._ShipCode = value;
					this.SendPropertyChanged("ShipCode");
					this.OnShipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShipName", DbType="NChar(3)")]
		public string ShipName
		{
			get
			{
				return this._ShipName;
			}
			set
			{
				if ((this._ShipName != value))
				{
					this.OnShipNameChanging(value);
					this.SendPropertyChanging();
					this._ShipName = value;
					this.SendPropertyChanged("ShipName");
					this.OnShipNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ship_Trip", Storage="_Trips", ThisKey="ShipCode", OtherKey="ShipCode")]
		public EntitySet<Trip> Trips
		{
			get
			{
				return this._Trips;
			}
			set
			{
				this._Trips.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Ship = this;
		}
		
		private void detach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Ship = null;
		}
	}
}
#pragma warning restore 1591
